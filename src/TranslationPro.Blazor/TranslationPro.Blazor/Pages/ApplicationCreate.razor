@page "/create-application"
@using TranslationPro.Shared.Interfaces
@inherits AuthenticatedBase

@if (Languages != null)
{
    
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>Basic Example</CardTitle>
                </CardHeader>
                <CardBody>
                    <Validations @ref="validationsBasicExampleRef" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Field>
                                <FieldLabel>Application Name</FieldLabel>
                                <TextEdit @bind-Text="@Input.Name" Placeholder="Enter application Name" />
                            </Field>
                        </Validation>
                        <Button Color="Color.Primary" Clicked="SubmitBasicExample">Submit</Button>
                    </Validations>
                
                    <Field>
                        <FieldLabel>Select Languages</FieldLabel>
                        <Select TValue="string" Multiple SelectedValuesChanged="@OnChangeSelection">
                        
                            @foreach (var lang in Languages)
                            {
                                <SelectItem Value="@lang.Id">@lang.Name</SelectItem>
                            }

                        </Select>
                        <FieldHelp>Hold Ctrl to select more than one</FieldHelp>
                    </Field>
                    <Field>
                        <Button Color="Color.Primary" Clicked="HandleSubmit" >Submit</Button>
                    </Field>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

@code {
    Validations? validationsBasicExampleRef;

    [Inject]
    public ILanguagesController LanguagesController { get; set; }

    public ApplicationCreateOptions Input { get; set; } = new();
         
    private List<LanguageOutput> Languages { get; set; }

    private readonly List<string> selection = new();

    protected override async Task LoadData()
    {
        await base.LoadData();

        Languages = await LanguagesController.GetLanguagesAsync();

        NavigationItems.Add(new NavigationItem()
        {
            Title = "Create Application"
        });
    }

    async Task SubmitBasicExample()
    {
        if ( await validationsBasicExampleRef!.ValidateAll() )
        {
            await validationsBasicExampleRef.ClearAll();
        }
    }

    
    private void OnChangeSelection(IReadOnlyList<string> selectedItems)
    {
        selection.Clear();
        foreach (var item in selectedItems)
        {
            selection.Add(item);
        }
    }

    private async Task HandleSubmit(MouseEventArgs evnt)
    {
        Input.Languages = selection.ToArray();

        var result = await ApplicationService.CreateApplicationAsync(Input);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo($"/applications/{result.Id}");
        }
    }
}